import React, { useState } from "react";
import { SupabaseClient } from "@supabase/supabase-js";

interface VulnerabilityDisclosureProps {
  supabaseClient: SupabaseClient;
  tables: string[];
  isAuthenticated: boolean;
  companyName: string;
  companyUrl: string;
  disclosureCredits: string;
}

const VulnerabilityDisclosure: React.FC<VulnerabilityDisclosureProps> = ({
  supabaseClient,
  tables,
  isAuthenticated,
  companyName,
  companyUrl,
  disclosureCredits,
}) => {
  const [vulnerabilityReport, setVulnerabilityReport] = useState<string>("");

  const processTablesInChunks = async (
    tables: string[],
    processFn: (table: string) => Promise<any>,
    chunkSize = 100
  ) => {
    const summary: any[] = [];

    for (let i = 0; i < tables.length; i += chunkSize) {
      const chunk = tables.slice(i, i + chunkSize);

      const promises = chunk.map(processFn);
      const results = await Promise.all(promises);

      results.forEach((entry) => {
        if (entry) {
          summary.push(entry);
        }
      });
    }

    return summary;
  };

  const fetchTableData = async (table: string) => {
    try {
      const { data, error } = await supabaseClient.from(table).select("*");
      if (error) throw error;
      return { table, data };
    } catch (err: any) {
      return { table, error: err.message };
    }
  };

  const generateVulnerabilityReport = async () => {
    const summary = await processTablesInChunks(tables, fetchTableData);

    const vulnerableTableNameList = summary
      .filter((entry) => entry.data && entry.data.length > 0)
      .map((entry) => ({
        table: entry.table,
        size: entry.data.length > 1000 ? "1000+" : entry.data.length,
      }));
    const vulnerableTables = vulnerableTableNameList
      .map(
        (entry) =>
          `${entry.table} (${
            entry.size >= 1000 ? "1000+" : entry.size
          } entries)`
      )
      .join(", ");

    let accessLinksText = "";
    if (!isAuthenticated) {
      const accessLinks = vulnerableTableNameList.map(
        (entry) =>
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          //@ts-expect-error
          `${supabaseClient.supabaseUrl}/rest/v1/${entry.table}?select=*&apikey=${supabaseClient.supabaseKey}`
      );

      accessLinksText = `Here is an example link using the API:\n${accessLinks
        .slice(0, 1)
        .join("\n")}`;
    }

    const report = `Hello ${companyName} team,
  
I wanted to let you know of an important security issue. Specifically, your Supabase database is not properly secured (with row level security or other measures). As a result, an attacker can access data stored in the Supabase instance used at ${companyUrl}.

Supabase instance in question:

URL: ${
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      //@ts-expect-error
      supabaseClient.supabaseUrl
    }
Anon Key: ${
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      //@ts-expect-error
      supabaseClient.supabaseKey
    }
      
This affects the following tables:
${vulnerableTables}

The data is accessible via the API or using the Supabase client as usual (which utilizes the mentioned API).
${accessLinksText}

Let me know if you need more information or have any further questions.

Best,
${disclosureCredits}`;

    setVulnerabilityReport(report);
  };

  const copyToClipboard = () => {
    const text = vulnerabilityReport.replace(/<[^>]*>/g, ""); // Strip HTML tags
    navigator.clipboard.writeText(text).then(
      () => {
        alert("Text copied to clipboard!");
      },
      (err) => {
        alert("Failed to copy text: " + err);
      }
    );
  };

  return (
    <div className="mt-4 w-full">
      <button
        className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded mt-4"
        onClick={generateVulnerabilityReport}
      >
        Generate Report
      </button>
      {vulnerabilityReport && (
        <div className="mt-4 w-full bg-gray-100 p-4 rounded">
          <h4 className="text-lg font-bold">Vulnerability Report:</h4>
          <pre className="mt-2 whitespace-pre-wrap text-xs">
            {vulnerabilityReport}
          </pre>
          <button
            className="mt-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded"
            onClick={copyToClipboard}
          >
            Copy to Clipboard
          </button>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityDisclosure;
