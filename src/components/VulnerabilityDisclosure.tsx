import React, { useState, useEffect } from "react";
import { SupabaseClient } from "@supabase/supabase-js";
import toast from "react-hot-toast";
import { fetchTableData, processTablesInChunks } from "../supabaseUtils";

interface VulnerabilityDisclosureProps {
  supabaseClient: SupabaseClient;
  tables: string[];
  isAuthenticated: boolean;
}

const VulnerabilityDisclosure: React.FC<VulnerabilityDisclosureProps> = ({
  supabaseClient,
  tables,
  isAuthenticated,
}) => {
  const [vulnerabilityReport, setVulnerabilityReport] = useState<string>("");
  const [companyName, setCompanyName] = useState<string>("");
  const [companyUrl, setCompanyUrl] = useState<string>("");
  const [emailTemplate, setEmailTemplate] = useState<string>(
    localStorage.getItem("emailTemplate") ||
      `Hello {companyName} team,
  
I wanted to let you know of an important security issue. Specifically, your Supabase database is not properly secured (with row level security or other measures). As a result, an attacker can access data stored in the Supabase instance used at {companyUrl}.

Supabase instance in question:

URL: {supabaseUrl}
Anon Key: {supabaseKey}
      
This affects the following tables:
{vulnerableTables}

The data is accessible via the API or using the Supabase client as usual (which utilizes the mentioned API).
{accessLinksText}

Let me know if you need more information or have any further questions.

Best,
Your Name`
  );
  const [isEditingTemplate, setIsEditingTemplate] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(false); // New state variable for loading status

  useEffect(() => {
    localStorage.setItem("emailTemplate", emailTemplate);
  }, [emailTemplate]);

  const generateVulnerabilityReport = async () => {
    setIsLoading(true); // Set loading to true
    const generationToast = toast.loading("Generating vulnerability report...");
    const summary = await processTablesInChunks(tables, (table) =>
      fetchTableData(supabaseClient, table)
    );

    const vulnerableTableNameList = summary
      .filter((entry) => entry.data && (entry.data?.length ?? 0) > 0)
      .map((entry) => ({
        table: entry.table,
        size:
          (entry.data?.length ?? 0) % 100 == 0
            ? `${entry.data?.length ?? 0}+`
            : entry.data?.length ?? 0,
      }));
    const vulnerableTables = vulnerableTableNameList
      .map((entry) => `${entry.table} (${entry.size} entries)`)
      .join(", ");

    let accessLinksText = "";
    if (!isAuthenticated) {
      const accessLinks = vulnerableTableNameList.map(
        (entry) =>
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          //@ts-expect-error
          `${supabaseClient.supabaseUrl}/rest/v1/${entry.table}?select=*&apikey=${supabaseClient.supabaseKey}`
      );

      accessLinksText = `Here is an example link using the API:\n${accessLinks
        .slice(0, 1)
        .join("\n")}`;
    }

    const report = emailTemplate
      .replace(/{companyName}/g, companyName) // Replace {companyName} with companyName
      .replace(/{companyUrl}/g, companyUrl) // Replace {companyUrl} with companyUrl
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      //@ts-expect-error
      .replace(/{supabaseUrl}/g, supabaseClient.supabaseUrl) // Replace {supabaseUrl} with supabaseClient.supabaseUrl
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      //@ts-expect-error
      .replace(/{supabaseKey}/g, supabaseClient.supabaseKey) // Replace {supabaseKey} with supabaseClient.supabaseKey
      .replace(/{vulnerableTables}/g, vulnerableTables) // Replace {vulnerableTables} with vulnerableTables
      .replace(/{accessLinksText}/g, accessLinksText); // Replace {accessLinksText} with accessLinksText

    setVulnerabilityReport(report);
    toast.success("Vulnerability report generated!", {
      id: generationToast,
    });
    setIsLoading(false); // Set loading to false
  };

  const copyToClipboard = () => {
    const text = vulnerabilityReport.replace(/<[^>]*>/g, ""); // Strip HTML tags
    navigator.clipboard.writeText(text).then(
      () => {
        toast.success("Text copied to clipboard!");
      },
      (err) => {
        toast.error("Failed to copy text: " + err);
      }
    );
  };

  const generateMailtoLink = () => {
    const subject = `Security Issue with ${companyName}`;
    const body = encodeURIComponent(
      vulnerabilityReport.replace(/<[^>]*>/g, "")
    );
    const mailtoLink = `mailto:?subject=${encodeURIComponent(
      subject
    )}&body=${body}`;
    return mailtoLink;
  };

  return (
    <div className="flex flex-col items-center justify-center mb-4 space-y-6 bg-white p-8 rounded-lg shadow-lg w-4/5">
      <div className="flex flex-col items-center w-full space-y-6 mt-8">
        <h3 className="text-lg text-center text-gray-700">
          Vulnerability Disclosure
        </h3>
        <input
          type="text"
          placeholder="Company Name"
          className="w-full p-2 border border-gray-300 rounded"
          value={companyName}
          onChange={(e) => setCompanyName(e.target.value)}
        />
        <input
          type="text"
          placeholder="Company URL"
          className="w-full p-2 border border-gray-300 rounded mt-2"
          value={companyUrl}
          onChange={(e) => setCompanyUrl(e.target.value)}
        />
        <div className="flex flex-row space-x-4">
          <button
            className={`bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded ${
              isLoading ? "opacity-50 cursor-not-allowed" : ""
            }`}
            onClick={generateVulnerabilityReport}
            disabled={isLoading} // Disable button while loading
          >
            {isLoading ? "Generating..." : "Generate Report"}
          </button>
          <button
            className="bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded"
            onClick={() => setIsEditingTemplate(!isEditingTemplate)}
          >
            {isEditingTemplate ? "Hide Template" : "Edit Template"}
          </button>
          {vulnerabilityReport && (
            <>
              <button
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                onClick={copyToClipboard}
              >
                Copy to Clipboard
              </button>
              <a
                href={generateMailtoLink()}
                target="_blank"
                className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
              >
                Send Email
              </a>
            </>
          )}
        </div>
        {isEditingTemplate && (
          <textarea
            placeholder="Email Template"
            className="w-full p-2 border border-gray-300 rounded mt-2"
            value={emailTemplate}
            onChange={(e) => setEmailTemplate(e.target.value)}
            rows={10}
          />
        )}
        {vulnerabilityReport && (
          <div className="w-full bg-gray-100 p-4 rounded">
            <h4 className="text-lg font-bold">Vulnerability Report:</h4>
            <pre className="mt-2 whitespace-pre-wrap text-xs">
              {vulnerabilityReport}
            </pre>
          </div>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityDisclosure;
