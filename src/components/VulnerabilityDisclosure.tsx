import React, { useState } from "react";
import { SupabaseClient } from "@supabase/supabase-js";
import toast from "react-hot-toast";
import { fetchTableData, processTablesInChunks } from "../supabaseUtils";

interface VulnerabilityDisclosureProps {
  supabaseClient: SupabaseClient;
  tables: string[];
  isAuthenticated: boolean;
  companyName: string;
  companyUrl: string;
  disclosureCredits: string;
}

const VulnerabilityDisclosure: React.FC<VulnerabilityDisclosureProps> = ({
  supabaseClient,
  tables,
  isAuthenticated,
  companyName,
  companyUrl,
  disclosureCredits,
}) => {
  const [vulnerabilityReport, setVulnerabilityReport] = useState<string>("");

  const generateVulnerabilityReport = async () => {
    const generationToast = toast.loading("Generating vulnerability report...");
    const summary = await processTablesInChunks(tables, (table) =>
      fetchTableData(supabaseClient, table)
    );

    const vulnerableTableNameList = summary
      .filter((entry) => entry.data && (entry.data?.length ?? 0) > 0)
      .map((entry) => ({
        table: entry.table,
        size:
          (entry.data?.length ?? 0) > 1000
            ? `${(entry.data?.length ?? 0) - 1}+`
            : entry.data?.length ?? 0,
      }));
    const vulnerableTables = vulnerableTableNameList
      .map((entry) => `${entry.table} (${entry.size} entries)`)
      .join(", ");

    let accessLinksText = "";
    if (!isAuthenticated) {
      const accessLinks = vulnerableTableNameList.map(
        (entry) =>
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          //@ts-expect-error
          `${supabaseClient.supabaseUrl}/rest/v1/${entry.table}?select=*&apikey=${supabaseClient.supabaseKey}`
      );

      accessLinksText = `Here is an example link using the API:\n${accessLinks
        .slice(0, 1)
        .join("\n")}`;
    }

    const report = `Hello ${companyName} team,
  
I wanted to let you know of an important security issue. Specifically, your Supabase database is not properly secured (with row level security or other measures). As a result, an attacker can access data stored in the Supabase instance used at ${companyUrl}.

Supabase instance in question:

URL: ${
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      //@ts-expect-error
      supabaseClient.supabaseUrl
    }
Anon Key: ${
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      //@ts-expect-error
      supabaseClient.supabaseKey
    }
      
This affects the following tables:
${vulnerableTables}

The data is accessible via the API or using the Supabase client as usual (which utilizes the mentioned API).
${accessLinksText}

Let me know if you need more information or have any further questions.

Best,
${disclosureCredits}`;

    setVulnerabilityReport(report);
    toast.success("Vulnerability report generated!", {
      id: generationToast,
    });
  };

  const copyToClipboard = () => {
    const text = vulnerabilityReport.replace(/<[^>]*>/g, ""); // Strip HTML tags
    navigator.clipboard.writeText(text).then(
      () => {
        toast.success("Text copied to clipboard!");
      },
      (err) => {
        toast.error("Failed to copy text: " + err);
      }
    );
  };

  const generateMailtoLink = () => {
    const subject = `Important Security Issue for ${companyName}`;
    const body = encodeURIComponent(
      vulnerabilityReport.replace(/<[^>]*>/g, "")
    );
    const mailtoLink = `mailto:?subject=${encodeURIComponent(
      subject
    )}&body=${body}`;
    return mailtoLink;
  };

  return (
    <div className="mt-4 w-full">
      <div className="flex space-x-4 mb-4">
        <button
          className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
          onClick={generateVulnerabilityReport}
        >
          Generate Report
        </button>
        {vulnerabilityReport && (
          <>
            <button
              className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
              onClick={copyToClipboard}
            >
              Copy to Clipboard
            </button>
            <a
              href={generateMailtoLink()}
              target="_blank"
              className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
            >
              Send Email
            </a>
          </>
        )}
      </div>
      {vulnerabilityReport && (
        <div className="w-full bg-gray-100 p-4 rounded">
          <h4 className="text-lg font-bold">Vulnerability Report:</h4>
          <pre className="mt-2 whitespace-pre-wrap text-xs">
            {vulnerabilityReport}
          </pre>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityDisclosure;
